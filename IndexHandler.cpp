// insert stopword vector
//add an unordered map called hashed word that maps strings to strings 
//make a function called addPerson that takes in docName and a list of strings called persons. it should iterate through each string in the list and insert it into a hashtable called hashTablePersons along with document anmes
//addOrds function will take two arguments, a string called docName and a list of strings called persons. It iterates through each string in the list and inserts it into a hash table called hashTableOrds along with the document name
//the function addDoc takes two arguments a string called docName and a string called persons. it iterates through seach string and inserts it into the hashtable hashTableOrgs along with the ducment names
//a dunction addDoc will take two arguemnsta a tring called docName and a string called DocText. It extracts all the words from the text using stringstream then checks to see if the word is a stop word
//if the word is not in stoplist then it increments a counter called numWords then checks to see if the word has already been hashed and if its been hashed then it replaces word with hashed calue if it has not been hashed then it gets the stemmed version of the word via using Porter2Stemmmer library 
//function get top 50 words will output all words in TreeIndex along with their number of appearances. it first calles treeindex's ouuutput function to print all words inn TreeIndex then it gets all words in TreeIndex as a vector of IndexEntry objects. It sorts this vector sin descrnng order based off of each objects number of documents using a custom comparator strutct
